<!-- Author: John Mark Connect with me @ GitHub: johnmark14 -->

<!-- Start Section Main Product Page -->
<section class="section-product section-padding remove-extra">
    <div id="mainProduct" class="product-shell shell">
        <a href="/pages/choose" class="product-back">< Product Selection</a>
        <div class="product-body">
            <div class="columns is-centered is-variable is-5">
                <div class="column is-5 product-featured-img">
                    <!-- Data Attributes here are used to identify product shape for customization -->
                    <figure class="image is-4by5" :style="{backgroundImage: `url(${variantImage})`}" data-product-{{-product.metafields.products.custom_tags-}}>
                        <img :src="variantImage" alt="{{ product.images[0].alt }}" loading="lazy">
                        <div v-html="myIcon" class="my-icon custom-{{-product.metafields.products.custom_tags-}}" :class="colorClass(activeVariant.option1)" v-if="withIcons" v-if="withPersonalization"></div>
                        <div class="my-txts custom-{{-product.metafields.products.custom_tags-}}" :class="[{initials: thisInitials}, {vertical: thisVerticalText}]" v-if="withPersonalization">
                            <font class="txt-1" :class="colorClass(activeVariant.option1)" v-text="textLineItems.text1" v-if="textLineItems.text1" :style="{fontFamily: fontStyle}"></font>
                            <font class="txt-2" :class="colorClass(activeVariant.option1)" v-text="textLineItems.text2" v-if="textLineItems.text2" :style="{fontFamily: fontStyle}"></font>
                            <font class="txt-3" :class="colorClass(activeVariant.option1)" v-text="textLineItems.text3" v-if="textLineItems.text3" :style="{fontFamily: fontStyle}"></font>
                            <font class="txt-4" :class="colorClass(activeVariant.option1)" v-text="textLineItems.text4" v-if="textLineItems.text4" :style="{fontFamily: fontStyle}"></font>
                            <font class="txt-5" :class="colorClass(activeVariant.option1)" v-text="textLineItems.text5" v-if="textLineItems.text5" :style="{fontFamily: fontStyle}"></font>
                        </div>
                    </figure>
                </div>
                <div class="column is-3">
                    <div class="container">
                        <div class="product-headings">
                            <div class="product-title">
                                <h1 class="g-heading-color">${products.title}</h1>
                            </div>
                            <div class="product-price">
                                <p>Starts at <span>${money(activeVariant.price)}</span></p>
                            </div>
                        </div>
                        <div class="product-options">
                            <!-- Option 1 -->
                            {% render 'option-product-variant' %}
                            <!-- Option 2 -->
                            {% render 'option-engraving' %}
                            
                            <div v-if="withPersonalization">
                                <!-- Option 4 -->
                                {% render 'option-styles' %}
                                <!-- Option 5 -->
                                {% render 'option-icon-fonts' %}
                                <!-- Option 6 -->
                                {% render 'option-personalized-text' %}
                            </div>
                        </div>
                        <div class="product-quantity">
                            <div class="quantity-heading">
                                <h4 class="g-heading-color">Quantity</h4>
                            </div>
                            <div class="quantity">
                                <div class="item-quantity">
                                    <div class="item-actions">
                                        <div class="qt add">
                                            <a href="/" @click.prevent="addQuantity">+</a>
                                        </div>
                                        <div class="qt items wide">
                                            <span>${ variantQuantity }</span>
                                        </div>
                                        <div class="qt minus">
                                            <a href="/" @click.prevent="minusQuantity">-</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="product-button">
                            <a href="/" class="product-btn" @click.prevent="addToCart($event)">
                                <div class="btn-desc">
                                    <span>{% render 'shopping-cart' %}</span>
                                    <span>Add to cart</span>
                                    <span>${ getTotalPrice }</span>
                                </div>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

{% schema %}
{
    "name": "Product Page",
    "settings": [
        {
            "type": "textarea",
            "id": "textBelowImg",
            "label": "Text Below Product Image",
            "default": "Write something about the image or a disclaimer."
        },
        {
            "type": "header",
            "content": "Button Text"
        },
        {
            "type": "text",
            "id": "btnText1",
            "label": "Text 1",
            "default": "Check"
        },
        {
            "type": "text",
            "id": "btnText2",
            "label": "Text 2",
            "default": "Check the content"
        }
    ]
}
{% endschema %}

<script>
    // Defaults
    const withPersonalization = true
    const maxOfText = 5
    const maxOfChar = 10
    const fontStyle = 'mt-regular'

    if(document.querySelector('#mainProduct')) {
        const MainProduct = {
            name: "product Page",
            delimiters: ['${', '}'],
            data() {
                return {
                    cartData: store,
                    variantImage: "{{ product.selected_or_first_available_variant.image.src | img_url: 'master'}}",
                    currentVariantID: "{{product.selected_or_first_available_variant.id}}",
                    isDisabled: false,
                    productType: "{{product.type}}",
                    totalPrice: "{{ product.selected_or_first_available_variant.price }}",
                    variantTitle: "{{product.selected_or_first_available_variant.title}}",
                    productTitle: "{{product.title}}",
                    productDesc: `{{product.description}}`,
                    productHandle: "{{product.handle}}",
                    variantQuantity: 1,
                    withPersonalization: true,
                    withIcons: false,
                    myIcon: "",
                    thisInitials: false,
                    thisVerticalText: false,
                    maxOfText: maxOfText,
                    maxOfChar: maxOfChar,
                    fontStyle: fontStyle,
                    textLineItems: {
                        style: 'Horizontal Text',
                        fontStyle: 'mt-regular',
                        text1: '',
                        text2: '',
                        text3: '',
                        text4: '',
                        text5: '',
                    },
                    personalize: {},
                    // Revised
                    products: {},
                    selectedVariants: [],
                    variants: "",
                    activeVariant: "",

                }
            },
            methods: {
               
                // This method is used when product variant is change
                onLineItemChange(event) {

                    // This adds Icon price to the product
                    if(this.withIcons) {
                        let totalPrice = parseFloat((this.activeVariant.price/100).toFixed(2))
                        let personalizationPrice = parseFloat((event.target.value/100).toFixed(2))
                        let newPrice = parseFloat((totalPrice + personalizationPrice).toFixed(2)) * 100

                        this.totalPrice = newPrice
                    } else {
                        this.totalPrice = this.activeVariant.price
                    }
                },
                addDesignStyles(e) {
                    const dataPart = e.target.getAttribute('data-part')
                    switch(dataPart) {
                        case 'Horizontal Text':
                            this.maxOfText = 5
                            this.maxOfChar = 10
                            this.textLineItems = {
                                style: dataPart,
                                text1: '',
                                text2: '',
                                text3: '',
                                text4: '',
                                text5: '',
                            }
                            this.myIcon = ""
                            this.thisInitials = false
                            this.thisVerticalText = false
                            console.log(this.withStyle)
                            break;
                        case 'Vertical Text':
                            this.withStyle = 'Vertical Text'
                            this.maxOfText = 3
                            this.maxOfChar = 10
                            this.textLineItems = {
                                style: dataPart,
                                text1: '',
                                text2: '',
                                text3: ''
                            }
                            this.thisVerticalText = true
                            this.myIcon = ""
                            this.thisInitials = false
                            console.log(this.withStyle)
                            break;
                        case 'Initials':
                            this.withStyle = 'Initials Text'
                            this.maxOfText = 1
                            this.maxOfChar = 3
                            this.textLineItems = {
                                style: dataPart,
                                text1: ''
                            }
                            this.thisVerticalText = false
                            this.thisInitials = true
                            this.myIcon = ""
                            console.log(this.withStyle)
                            break;
                        case 'Icons':
                            this.withStyle = 'Icons'
                            this.maxOfText = 1
                            this.maxOfChar = 10
                            this.textLineItems = {
                                style: dataPart,
                                icon: 'Type A',
                                text1: ''
                            }
                            this.thisVerticalText = false
                            this.myIcon = e.target.getAttribute('data-icon')
                            this.thisInitials = false
                            console.log(this.withStyle)
                            break;
                        default:
                            this.thisVerticalText = false
                            this.thisInitials = false
                            this.myIcon = ""
                            window.location.href = "/pages/custom-order";
                    }
                },
                setFontStyle(e) {
                    this.fontStyle = e.target.value
                    console.log(this.fontStyle)
                },
                addIcon(e) {
                    this.textLineItems.icon = e.target.value
                    this.myIcon = e.target.getAttribute('data-icon')
                    console.log(this.myIcon)
                },
                // This method is used after the revision
                addToCart(event) {
                    // Check first if button is enable
                    if(!this.isDisabled) {
                        // For no personalization 
                        let withoutPersonalization = {
                            items: [
                                {
                                    id: this.activeVariant.id,
                                    quantity: this.variantQuantity,
                                    final_price: this.totalPrice,
                                    properties: {
                                        'personalization': this.withPersonalization,
                                    }
                                }
                            ]
                        }
                        // For with personalization
                        console.log(this.activeVariant.id)
                        let withPersonalization = {
                            items: [
                                {
                                    id: this.activeVariant.id,
                                    quantity: this.variantQuantity,
                                    final_price: this.totalPrice,
                                    properties: {
                                        'personalization': this.withPersonalization,
                                        'withIcon': this.withIcons ? true : 'N/A',
                                        'textStyle': this.withStyle,
                                        'fontStyle': this.fontStyle,
                                        ...this.textLineItems,
                                    }
                                },
                                this.personalize
                            ]
                        }
                        let data = this.withPersonalization ? withPersonalization : withoutPersonalization

                        document.body.style.cursor = "wait"
                        event.target.style.cursor = "wait"
                        event.target.disabled = true
                        this.isDisabled = true
                        axios.post('/cart/add.js', data).then((response) => {
                            store.getCart()
                            setTimeout(()=> {
                                event.target.disabled = false
                                event.target.style.cursor = "pointer"
                                document.body.style.cursor = "default"
                                document.body.style.overflow = "hidden"
                                this.cartData.state.isCartOpen = true
                                this.cartData.state.isOverlay = true
                                this.isDisabled = false

                                // Add bubble notification to header cart icon
                                this.cartData.state.isItem = true

                            }, 1000)
                        }).catch(error => {
                            console.log(`Error: ${error}`)
                        })
                    }
                },
                money(value) {
                    if(!value) return 0
                    return "$"+(value/100).toFixed(2)
                },
                addQuantity() {
                    this.variantQuantity++
                },
                minusQuantity() {
                    if(this.variantQuantity > 1) {
                        this.variantQuantity--
                    }
                },
                addPrice(e) {
                    let totalPrice = parseFloat((this.activeVariant.price/100).toFixed(2))
                    let personalizationPrice = parseFloat((e.target.value/100).toFixed(2))
                    let newPrice = parseFloat((totalPrice + personalizationPrice).toFixed(2)) * 100

                    this.totalPrice = newPrice

                    if(e.target.value != 0) {
                        this.withIcons = true
                    } else {
                        this.withIcons = false
                    }
                },

                // From new 
                changeVariantImage() {
                    this.variantImage = this.activeVariant.featured_image.src
                },
                changeVariant() {
                    this.variants.forEach((variant, i) => {
                        if(variant.option1 === this.selectedVariants[0] && variant.option2 === this.selectedVariants[1] && variant.option3 === this.selectedVariants[2]) {
                            this.activeVariant = variant
                            this.changeVariantImage()
                        }
                    })
                },
                variantChange(event) {
                    let option = event.target
                    this.selectedVariants[option.getAttribute('data-position') - 1] = option.value
                    console.log(this.selectedVariants)
                    console.log('Variant Change%%%%##########%%%%%%%%%%')
                    this.changeVariant()
                },
                // Classes for frontend
                colorClass(str,c) {
                    return str.toLowerCase().replaceAll(" ","-")
                },
                optionSelector(position, value) {
                    console.log(position)
                    console.log(value)
                    if(position == 1) {
                        if(value == this.activeVariant.option1) {
                            return true
                        }
                    } else if (position == 2) {
                        if(value == this.activeVariant.option2) {
                            return true
                        }
                    } else if(position == 3) {
                        if(value == this.activeVariant.option3) {
                            return true
                        }
                    } else {
                        return false
                    }

                },
                optionIdentifier(name, number) {
                    return `${name}-${number}`
                },
            },
            computed: {
                getTotalPrice() {
                    return this.money(this.totalPrice)
                },
                getPersonalizationPrice() {
                    return this.cartData.state.personalizationPrice
                }
            },
            created() {
                axios.get("/products/{{product.handle}}.js").then(results => {
                    this.products = results.data
                    this.variants = results.data.variants
                    results.data.options.map(item => this.selectedVariants.push(item.values[0]))
                    this.selectedVariants = [
                        this.selectedVariants[0] ? this.selectedVariants[0] : null,
                        this.selectedVariants[1] ? this.selectedVariants[1] : null,
                        this.selectedVariants[2] ? this.selectedVariants[2] : null
                    ]

                    this.variants.forEach((variant, i) => {
                        if(variant.id == this.currentVariantID) {
                            this.activeVariant = variant
                        }
                    })

                })
            },
            updated() {
                // this.personalize.quantity = this.variantQuantity
                this.personalize = this.withIcons ? {id: this.cartData.state.personalization, quantity: this.variantQuantity} : null
            },
            mounted() {

                // Disable the add to cart button if user try to add the add on personalization
                if(this.productType == 'hidden') this.isDisabled = true
            }
        }
        Vue.createApp(MainProduct).mount('#mainProduct')
    }
</script>