<!-- Author: John Mark Connect with me @ GitHub: johnmark14 -->

<!-- Start Section Main Product Page -->
<section class="section-check section-padding">
  <div id="pageCheck" class="check-shell shell">
      <div class="check-wrapper">
          <a :href="getBackLink" class="check-back mobile">< Return to the Editing Page</a>
          <div class="check-preview">
              <img :src="getVariantImage" alt="Product Image" loading="lazy">
          </div>
          <div class="check-side">
              <div class="check-info">
                  <h5 class="check-title">${getProductTitle}</h5>
                  <div class="check-desc">
                    <p class="check-desc__variant">Color: <span>${getVariantTitle}</span></p>
                    <p class="check-desc__price">${getTotalPrice} (tax included)</span></p>
                    <p class="check-desc__price-desc">${getProductDesc}</span></p>
                  </div>
                  <div class="check-list">
                    <h5 class="check-list__title">{{ section.settings.textId }}</h5>
                    <div class="check-list__content">
                      {{ section.settings.bodyId }}
                    </div>
                  </div>
              </div>
              <div class="check-agree">
                <p>{{ section.settings.textBelowId }}</p>
              </div>
              <div class="check-add">
                <button @click.prevent="addToCart">
                    <span>{% render "shopping-cart" %}</span>
                    <span>Add To Cart</span>
                </button>
                <a :href="getBackLink" class="check-back wide">< Return to the Editing Page</a>
              </div>
          </div>
      </div>
  </div>
</section>
{% schema %}
  {
    "name": "Check Page",
    "settings": [
      {
        "type": "text",
        "id": "textId",
        "label": "Header",
        "default": "Check list"
      },
      {
        "type": "textarea",
        "id": "bodyId",
        "label": "Body Text",
        "default": "Company statement about the products, warranty, policy, process, etc.",
        "info": "You can use HTML element such as <p> for paragraph."
      },
      {
        "type": "text",
        "id": "textBelowId",
        "label": "Below Text",
        "default": "I agree with the above and add it to my cart."
      }
    ]
  }
{% endschema %}

<script>
const PageCheck = {
    delimiters: ['${', '}'],
    data() {
        return {
          productTitle: '',
          productDesc: '',
          productHandle: '',
          selectedVariantId: '',
          variantImage: '',
          variantTitle: '',
          variantImage: '',
          totalPrice: '',
          productHandle: ''
        }
    },
    methods: {
        openPage() {
            window.location.href = "/cart"
        },
        addToCart() {
          let data = {
            id: this.selectedVariantId,
            quantity: 1,
          }
          axios.post('/cart/add.js', data).then((response) => {
            console.log(response)
            this.openPage()
          }).catch(error => {
            console.log(`Error: ${error}`)
          })
        }
    },
    mounted() {
      if(localStorage.productTitle) this.productTitle = localStorage.productTitle
      if(localStorage.productDesc) this.productDesc = localStorage.productDesc
      if(localStorage.productHandle) this.productHandle = localStorage.productHandle
      if(localStorage.selectedVariantId) this.selectedVariantId = localStorage.selectedVariantId
      if(localStorage.variantImage) this.variantImage = localStorage.variantImage
      if(localStorage.variantTitle) this.variantTitle = localStorage.variantTitle
      if(localStorage.variantImage) this.variantImage = localStorage.variantImage
      if(localStorage.totalPrice) this.totalPrice = localStorage.totalPrice
      if(localStorage.productHandle) this.productHandle = localStorage.productHandle
    },
    computed: {
      getBackLink() {
        return `/products/${this.productHandle}`
      },
      getVariantTitle() {
        return this.variantTitle
      },
      getProductTitle() {
        return this.productTitle
      },
      getProductDesc() {
        return this.productDesc
      },
      getTotalPrice() {
        return this.totalPrice
      },
      getVariantImage() {
        return this.variantImage
      }
    }
}

Vue.createApp(PageCheck).mount('#pageCheck');
</script>
